Guillaume HARTMANN
guillaume.hartmann@imt-atlantique.net

Projet : Microsoft visual code

https://github.com/Microsoft/vscode

Tout d’abord, ce projet est bien un projet libre car il possède la licence MIT qui est bien une licence libre (elle est bien recensée sur le site Opensource.org/licence)

Gouvernance : La gouvernance du projet est relativement clair mais le nombre de participants au projet peut être très important. En effet, c’est l’entreprise Microsoft qui est à l’origine de ce projet et qui a lancé le projet mais tout le monde peut participer au projet selon certaines conditions. Ainsi, une page entière est dédiée à la manière de pouvoir contribuer au projet et les normes à respecter. Il est ainsi demandé de lire la page « Code of Conduct » pour pouvoir travailler de manière conforme à ce qui a déjà été fait auparavant. Ainsi, Microsoft encourage tous les développeurs à participer à leur projet à condition que ces derniers suivent bien les normes définies par l’entreprise. La page wiki du projet explique tout cela. Ainsi, il est conseillé pour de nouveaux développeurs voulant participer au projet (après avoir cloné et créé le repo) de lire la liste des problèmes (issues list) et de répondre à l’un de ces derniers. Il est aussi précisé les prérequis qu’il faut pour pouvoir contribuer au projet. Ces prérequis sont liés à certains logiciels qu’il faut avoir sur son ordinateur personnel pour pouvoir lancer et tester le logiciel et ainsi comprendre son fonctionnement. Cela limite donc le nombre de collaborateurs qui peuvent participer au projet, puisqu’il faut au préalable maitriser ces logiciels. 
Enfin une partie explique ce qu’il faut faire pour qu’une « pull request » puisse être acceptée. Il faut dans un premier temps signer la « Contributor License Agreement » une première fois. Cela permet d’assurer au créateur du projet (Microsoft) que tous les contributeurs lui permettent d’avoir tous les droits sur leur contribution et que le créateur du projet peut le distribuer sous la licence qu’il souhaite. 
Il est aussi précisé de ne créer qu’une pull request par issue et de mettre le lien vers l’issue dans la pull request. Il est bien sûr précisé de suivre le « Coding guidelines » pour que les modifications soient conformes au reste du projet. 
Enfin, il est précisé pourquoi une pull request pourrait ne pas être accepté : soit parce que cela ne répond pas aux exigences de performance, soit parce que cela rend trop lourd le projet (l’éditeur de code doit être léger) soit parce que cela a un impact sur l’architecture du projet et que le propriétaire n’est pas en accord avec ses changements. Il est aussi précisé qu’il est conseillé de travailler sur un problème marqué comme « help-wanted » ou « bug ».
Pour résumer, le contributeur principal reste Microsoft donc une entreprise et ses équipes de développeurs et d’ingénieurs mais aussi des individus, des particuliers volontaires qui, s’ils suivent les règles dictées, peuvent contribuer au projet. Ceci reste un projet professionnel. C’est donc les ingénieurs de Microsoft qui peuvent « merged » une « pull request ».
On peut noter qu’il y a eu 434 personnes qui ont fait au moins un commit avec des personnes très actives ayant fait plus de 3825 commits comme bpasero qui est un ingénieur de chez Microsoft mais aussi des personnes très peu actives comme lucaslra qui a fait 3 commits et qui est un particulier ne travaillant pas chez Microsoft. Ainsi, les contributeurs sont bien des personnes de chez Microsoft mais aussi des particuliers voulant participer au projet.

Histoire : Le projet a été présenté pour la première fois en avril 2015 par Microsoft et a été créé sur GIT le 03 septembre 2015 par Microsoft. Ce projet est donc relativement récent (2 ans). Visual Studio code est un éditeur de texte et de code source qui est disponible sur Linux, Mac et Microsoft. Ceci est assez inhabituel pour Microsoft qui n’a jamais réussi à faire émerger un logiciel open source. On peut expliquer la motivation de Microsoft pour ce projet par l’envie de se racheter une image auprès des développeurs, notamment les développeurs Java, javascript, PHP, … En effet, ce projet ne va pas directement permettre à Microsoft un gain monétaire important (le logiciel est gratuit). 
Ce logiciel intègre la plupart des fonctionnalités de base d’un éditeur de texte comme la coloration syntaxique personnalisable ou bien encore l’auto-complétions, un système de plugins, … C’est un projet qui est très actif car par exemple il avait été mis à jour le 23 novembre 2017 à 16H30, et il est régulièrement mis à jour (tous les jours en général).  
Microsoft présente VS Code comme un nouveau type d’outil qui combine la simplicité d’un éditeur de texte avec ce que les développeurs ont besoin pour le cycle d’édition, construction, débogage. Cela permet une prise en charge complète de l’édition et du déboggage et une intégration légère avec les outils existants.  
Le projet a beaucoup évolué et Microsoft suit les avis et demandes d’évolutions exprimées par les utilisateurs. Ainsi, on a pu voir il y a quelques semaines l’ajout par Microsoft de la notion d’espace de travail.
Aujourd’hui VS Code est en tête des projets avec le plus grand nombre de contributeurs sur GitHub en comprenant les plugins associés.  

Mode contributif :

Exemple de contribution : 

Succès : - https://github.com/Microsoft/vscode/pull/9966
Ce premier exemple de contribution est très intéressant car il montre bien le processus qu’il faut effectuer pour contribuer à un projet libre. En effet, dans un premier temps la personne Meai1 a remarqué qu’une chose pouvait être amélioré dans le programme. Cette chose est qu’à un endroit une erreur était retournée mais que cette erreur n’était pas précise du tout. Il a ainsi proposé de travaillé sur cela pour permettre de retourner des messages d’erreurs qui seraient plus utiles et compréhensibles. Un robot de Microsoft a d’abord répondu à cette personne la remerciant pour sa contribution et lui expliquant qu’un humain allait étudier sa contribution. Kieferrm a donc assigné le problème à weinand qui la lui-même assigné à isidorn (ingénieur chez Microsoft). Isidorn a alors répondu et a expliqué à l’auteur de la modification qu’il n’avait pas exactement respecté les conventions du projet et qu’il fallait qu’il change un nom de variable s’il voulait que sa contribution soit merged. Ce dernier la alors fait (il n’a pas répondu directement au message, cela aurait peut-être été plus cordiale de répondre au message au vu du processus de collaboration à un projet libre). Isidorn a au final fini par merged la production. Cet exemple est intéressant car il montre un échange entre un particulier et un des auteurs du projet, cela montre aussi qu’il faut bien suivre les normes du projet si l’on veut que notre contribution soit acceptée. Cela montre aussi un dialogue entre un particulier et un ingénieur travaillant spécifiquement sur le projet.
- https://github.com/Microsoft/vscode/pull/38655
Ceci est une autre contribution à ce projet. Cette fois-ci ce n’est pas un particulier qui a trouvé une erreur mais une personne qui travaille chez Microsoft (mjbvz). Cet exemple est aussi intéressant car mjbvz explique le bug trouvé (quand on clique pour accepter une suggestion, elle peut ne pas encore avoir été résolu) puis ce qu’il faut pour que le bug soit fixé (être sûr que l’on résout le problème après avoir cliqué). Il a alors proposé une modification. Il s’est ensuite auto-assigné pour résoudre ce problème puis a demandé une relecture de jrieken (un autre ingénieur de chez Microsoft) pour sûrement être sûr que sa modification était correcte. Ce dernier lui a répondu en lui disant que cela était bien et a alors merged la contribution.
Ces deux exemples sont intéressants car il montre deux modes de contribution différente : soit pour un particulier soit pour un professionnel travaillant pour Microsoft.  Dans les deux cas cela a permis de corriger un problème et donc de faire avancer le projet. 

Echec : - https://github.com/Microsoft/vscode/pull/38332
Cette contribution visait à rectifier une traduction chinoise qui avait été faite dans le fichier Node.js. Cependant, cette contribution n’a pas été merged car elle ne suit pas les règles du projet. En effet, un développeur de chez Microsoft a répondu que les améliorations de traduction ne devaient pas venir directement du code mais de « Transifex » qui est une autre partie. Ainsi, l’ingénieur de Microsoft a clos la discussion et a refusé la modification. L’erreur qui a été commise par cette personne est intéressante car elle montre qu’il faut bien respecter les normes et la manière dont un projet fonctionne pour pouvoir y contribuer. A noter que cela est une contribution qui est à l’initiative du particulier qui a voulu faire la modification car il pensait avoir trouvé une erreur, mais ce n’est pas Microsoft qui avait demandé de se pencher sur cette question. Avant de vouloir corriger une erreur, il faut bien vérifier que cela est effectivement une erreur et comment et où réparer cette erreur si c’est le cas. 
